(set-option :print-success false)
(set-logic HO_ALL)
(define-sort |Z| () Int)
(declare-sort P 1)
(declare-datatype C (par (T1 T2) ((maplet (fst T1) (snd T2)))))
(define-sort |POW Z| () (P |Z|))
(define-sort |(Z x Z)| () (C |Z| |Z|))
(declare-fun |set.in Z| (|Z| |POW Z|) Bool)
(define-sort |POW (Z x Z)| () (P |(Z x Z)|))
(declare-fun |set.in (Z x Z)| (|(Z x Z)| |POW (Z x Z)|) Bool)
(declare-fun |rel.domain Z Z| (|POW (Z x Z)|) |POW Z|)
(assert (!
  (forall ((r |POW (Z x Z)|) (e |Z|))
    (= (|set.in Z| e (|rel.domain Z Z| r))
       (exists ((y |Z|)) (|set.in (Z x Z)| (maplet e y) r))))
  :named |ax:set.in.domain (Z x Z)|))
(declare-fun |rel.overwrite Z Z| (|POW (Z x Z)| |POW (Z x Z)|) |POW (Z x Z)|)
(assert (!
  (forall ((r1 |POW (Z x Z)|) (r2 |POW (Z x Z)|))
    (forall ((x |(Z x Z)|))
      (= (|set.in (Z x Z)| x (|rel.overwrite Z Z| r1 r2))
         (or (and (|set.in (Z x Z)| x r1)
                  (not (|set.in Z| (fst x) (|rel.domain Z Z| r1))))
             (|set.in (Z x Z)| x r2)))))
  :named |ax:set.in.overwrite (Z x Z)|))
(define-sort |? (Z x Z)| () (-> |(Z x Z)| Bool))
(declare-const |set.intent (Z x Z)| (-> |? (Z x Z)| |POW (Z x Z)|))
(assert (!
  (forall ((p |? (Z x Z)|))
    (forall ((x |(Z x Z)|))
      (= (|set.in (Z x Z)| x (|set.intent (Z x Z)| p))
         (p x))))
  :named |ax:set.in.intent (Z x Z)|))
(assert (!
  (forall ((s |POW (Z x Z)|) (t |POW (Z x Z)|))
    (=
      (= s t)
      (forall ((e |(Z x Z)|)) (= (|set.in (Z x Z)| e s) (|set.in (Z x Z)| e t)))))
  :named |ax.set.eq (Z x Z)|))
(assert (!
  (not
    (= (|rel.overwrite Z Z| (|set.intent (Z x Z)| (lambda ((x |(Z x Z)|)) (or (= x (maplet 2 5))(= x (maplet 2 4))(= x (maplet 3 5))(= x (maplet 4 1))(= x (maplet 4 0))))) (|set.intent (Z x Z)| (lambda ((x |(Z x Z)|)) (or (= x (maplet 0 0))(= x (maplet 1 9))(= x (maplet 2 2)))))) (|set.intent (Z x Z)| (lambda ((x |(Z x Z)|)) (or (= x (maplet 0 0))(= x (maplet 1 9))(= x (maplet 2 2))(= x (maplet 3 5))(= x (maplet 4 1)))))))
  :named |Goal|))
(check-sat)
(exit)
