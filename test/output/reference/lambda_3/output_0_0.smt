(set-option :print-success false)
(set-logic HO_ALL)
(define-sort |Z| () Int)
(declare-sort P 1)
(define-sort |POW Z| () (P |Z|))
(declare-datatype C (par (T1 T2) ((maplet (fst T1) (snd T2)))))
(declare-fun |set.in Z| (|Z| |POW Z|) Bool)
(define-sort |POW POW Z| () (P |POW Z|))
(define-sort |(POW Z x Z)| () (C |POW Z| |Z|))
(declare-fun |set.in POW Z| (|POW Z| |POW POW Z|) Bool)
(define-sort |POW (POW Z x Z)| () (P |(POW Z x Z)|))
(define-sort |POW POW POW Z| () (P |POW POW Z|))
(define-sort |((POW Z x Z) x POW POW Z)| () (C |(POW Z x Z)| |POW POW Z|))
(declare-fun |set.in (POW Z x Z)| (|(POW Z x Z)| |POW (POW Z x Z)|) Bool)
(declare-fun |set.in POW POW Z| (|POW POW Z| |POW POW POW Z|) Bool)
(define-sort |POW ((POW Z x Z) x POW POW Z)| () (P |((POW Z x Z) x POW POW Z)|))
(assert (!
  (forall ((s |POW POW Z|) (t |POW POW Z|))
    (=
      (= s t)
      (forall ((e |POW Z|)) (= (|set.in POW Z| e s) (|set.in POW Z| e t)))))
  :named |ax.set.eq POW Z|))
(define-sort |? (POW Z x Z)| () (-> |(POW Z x Z)| Bool))
(declare-const |set.intent (POW Z x Z)| (-> |? (POW Z x Z)| |POW (POW Z x Z)|))
(assert (!
  (forall ((p |? (POW Z x Z)|))
    (forall ((x |(POW Z x Z)|))
      (= (|set.in (POW Z x Z)| x (|set.intent (POW Z x Z)| p))
         (p x))))
  :named |ax:set.in.intent (POW Z x Z)|))
(declare-fun |set.in ((POW Z x Z) x POW POW Z)| (|((POW Z x Z) x POW POW Z)| |POW ((POW Z x Z) x POW POW Z)|) Bool)
(declare-fun |set.lambda (POW Z x Z) POW POW Z| (|? (POW Z x Z)| (-> |(POW Z x Z)| |POW POW Z|)) |POW ((POW Z x Z) x POW POW Z)|)
(assert (!
  (forall ((P |? (POW Z x Z)|)(E (-> |(POW Z x Z)| |POW POW Z|)))
    (forall ((p |((POW Z x Z) x POW POW Z)|))
      (= (|set.in ((POW Z x Z) x POW POW Z)| p (|set.lambda (POW Z x Z) POW POW Z| P E))
         (and (P (fst p))
              (= (snd p) (E (fst p)))))))
    :named |ax.set.in.lambda (POW Z x Z) POW POW Z|))
(define-sort |? Z| () (-> |Z| Bool))
(declare-const |set.intent Z| (-> |? Z| |POW Z|))
(assert (!
  (forall ((p |? Z|))
    (forall ((x |Z|))
      (= (|set.in Z| x (|set.intent Z| p))
         (p x))))
  :named |ax:set.in.intent Z|))
(define-sort |? POW Z| () (-> |POW Z| Bool))
(declare-const |set.intent POW Z| (-> |? POW Z| |POW POW Z|))
(assert (!
  (forall ((p |? POW Z|))
    (forall ((x |POW Z|))
      (= (|set.in POW Z| x (|set.intent POW Z| p))
         (p x))))
  :named |ax:set.in.intent POW Z|))
(assert (!
  (not
    (|set.in ((POW Z x Z) x POW POW Z)| (maplet (maplet (|set.intent Z| (lambda ((x |Z|)) (= x 1))) 2) (|set.intent POW Z| (lambda ((x |POW Z|)) (or (= x (|set.intent Z| (lambda ((x |Z|)) (= x 1))))(= x (|set.intent Z| (lambda ((x |Z|)) (= x 3)))))))) (|set.lambda (POW Z x Z) POW POW Z| (lambda ((c |(POW Z x Z)|))     (and
      true
      true))  (lambda ((c |(POW Z x Z)|)) (|set.intent POW Z| (lambda ((x |POW Z|)) (or (= x (fst c))(= x (|set.intent Z| (lambda ((x |Z|)) (= x (snd c))))))))))))
  :named |Goal|))
(check-sat)
(exit)
