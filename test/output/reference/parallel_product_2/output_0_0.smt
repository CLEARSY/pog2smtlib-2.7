(set-option :print-success false)
(set-logic HO_ALL)
(define-sort |Z| () Int)
(declare-datatype C (par (T1 T2) ((maplet (fst T1) (snd T2)))))
(define-sort |(Z x Z)| () (C |Z| |Z|))
(define-sort |((Z x Z) x (Z x Z))| () (C |(Z x Z)| |(Z x Z)|))
(declare-sort P 1)
(define-sort |POW ((Z x Z) x (Z x Z))| () (P |((Z x Z) x (Z x Z))|))
(define-sort |POW (Z x Z)| () (P |(Z x Z)|))
(declare-fun |set.in ((Z x Z) x (Z x Z))| (|((Z x Z) x (Z x Z))| |POW ((Z x Z) x (Z x Z))|) Bool)
(declare-fun |set.in (Z x Z)| (|(Z x Z)| |POW (Z x Z)|) Bool)
(define-sort |? ((Z x Z) x (Z x Z))| () (-> |((Z x Z) x (Z x Z))| Bool))
(declare-const |set.intent ((Z x Z) x (Z x Z))| (-> |? ((Z x Z) x (Z x Z))| |POW ((Z x Z) x (Z x Z))|))
(assert (!
  (forall ((p |? ((Z x Z) x (Z x Z))|))
    (forall ((x |((Z x Z) x (Z x Z))|))
      (= (|set.in ((Z x Z) x (Z x Z))| x (|set.intent ((Z x Z) x (Z x Z))| p))
         (p x))))
  :named |ax:set.in.intent ((Z x Z) x (Z x Z))|))
(define-sort |? (Z x Z)| () (-> |(Z x Z)| Bool))
(declare-const |set.intent (Z x Z)| (-> |? (Z x Z)| |POW (Z x Z)|))
(assert (!
  (forall ((p |? (Z x Z)|))
    (forall ((x |(Z x Z)|))
      (= (|set.in (Z x Z)| x (|set.intent (Z x Z)| p))
         (p x))))
  :named |ax:set.in.intent (Z x Z)|))
(assert (!
  (forall ((s |POW ((Z x Z) x (Z x Z))|) (t |POW ((Z x Z) x (Z x Z))|))
    (=
      (= s t)
      (forall ((e |((Z x Z) x (Z x Z))|)) (= (|set.in ((Z x Z) x (Z x Z))| e s) (|set.in ((Z x Z) x (Z x Z))| e t)))))
  :named |ax.set.eq ((Z x Z) x (Z x Z))|))
(declare-fun |parallelproduct Z Z Z Z| (|POW (Z x Z)| |POW (Z x Z)|) |POW ((Z x Z) x (Z x Z))|)
(assert (!
  (forall ((R1 |POW (Z x Z)|) (R2 |POW (Z x Z)|) (p |((Z x Z) x (Z x Z))|))
    (= (|set.in ((Z x Z) x (Z x Z))| p (|parallelproduct Z Z Z Z| R1 R2))
       (and
         (|set.in (Z x Z)| (maplet (fst (fst p)) (fst (snd p))) R1)
         (|set.in (Z x Z)| (maplet (snd (fst p)) (snd (snd p))) R2)
       )
    )
  )
  :named |ax.set.in.parallelproduct (((Z x Z) x Z) x Z)|))
(assert (!
  (not
    (= (|parallelproduct Z Z Z Z| (|set.intent (Z x Z)| (lambda ((x |(Z x Z)|)) (= x (maplet 0 1)))) (|set.intent (Z x Z)| (lambda ((x |(Z x Z)|)) (= x (maplet 7 10))))) (|set.intent ((Z x Z) x (Z x Z))| (lambda ((x |((Z x Z) x (Z x Z))|)) (= x (maplet (maplet 0 7) (maplet 1 10)))))))
  :named |Goal|))
(check-sat)
(exit)
