(set-option :print-success false)
(set-logic HO_ALL)
(declare-datatype C (par (T1 T2) ((maplet (fst T1) (snd T2)))))
(define-sort |Z| () Int)
(declare-sort P 1)
(define-sort |(Z x Z)| () (C |Z| |Z|))
(define-sort |POW Z| () (P |Z|))
(define-sort |POW (Z x Z)| () (P |(Z x Z)|))
(declare-fun |set.in Z| (|Z| |POW Z|) Bool)
(define-sort |((Z x Z) x Z)| () (C |(Z x Z)| |Z|))
(declare-fun |set.in (Z x Z)| (|(Z x Z)| |POW (Z x Z)|) Bool)
(define-sort |POW ((Z x Z) x Z)| () (P |((Z x Z) x Z)|))
(declare-fun |set.in ((Z x Z) x Z)| (|((Z x Z) x Z)| |POW ((Z x Z) x Z)|) Bool)
(define-sort |POW POW ((Z x Z) x Z)| () (P |POW ((Z x Z) x Z)|))
(define-sort |POW POW (Z x Z)| () (P |POW (Z x Z)|))
(declare-fun |set.subseteq ((Z x Z) x Z)| (|POW ((Z x Z) x Z)| |POW ((Z x Z) x Z)|) Bool)
(assert (!
    (forall ((s |POW ((Z x Z) x Z)|) (t |POW ((Z x Z) x Z)|))
      (=
        (|set.subseteq ((Z x Z) x Z)| s t)
        (forall ((e |((Z x Z) x Z)|)) (=> (|set.in ((Z x Z) x Z)| e s) (|set.in ((Z x Z) x Z)| e t)))
      )
    )
    :named |ax.set.subseteq ((Z x Z) x Z)|))
(declare-fun |set.in POW ((Z x Z) x Z)| (|POW ((Z x Z) x Z)| |POW POW ((Z x Z) x Z)|) Bool)
(declare-fun |set.subseteq (Z x Z)| (|POW (Z x Z)| |POW (Z x Z)|) Bool)
(assert (!
    (forall ((s |POW (Z x Z)|) (t |POW (Z x Z)|))
      (=
        (|set.subseteq (Z x Z)| s t)
        (forall ((e |(Z x Z)|)) (=> (|set.in (Z x Z)| e s) (|set.in (Z x Z)| e t)))
      )
    )
    :named |ax.set.subseteq (Z x Z)|))
(declare-fun |set.in POW (Z x Z)| (|POW (Z x Z)| |POW POW (Z x Z)|) Bool)
(declare-fun |sub-sets ((Z x Z) x Z)| (|POW ((Z x Z) x Z)|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((s |POW ((Z x Z) x Z)|) (t |POW ((Z x Z) x Z)|))
    (=
      (|set.in POW ((Z x Z) x Z)| s (|sub-sets ((Z x Z) x Z)| t))
      (|set.subseteq ((Z x Z) x Z)| s t)))
  :named |ax.sub-sets ((Z x Z) x Z)|))
(declare-fun |set.product (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW ((Z x Z) x Z)|)
(assert (!
  (forall ((s1 |POW (Z x Z)|) (s2 |POW Z|))
    (forall ((p |((Z x Z) x Z)|))
      (= (|set.in ((Z x Z) x Z)| p (|set.product (Z x Z) Z| s1 s2))
        (and (|set.in (Z x Z)| (fst p) s1) (|set.in Z| (snd p) s2)))))
  :named |ax.set.in.product.1 ((Z x Z) x Z)|))
(assert (!
  (forall ((s1 |POW (Z x Z)|) (s2 |POW Z|))
    (forall ((x1 |(Z x Z)|) (x2 |Z|))
      (= (|set.in ((Z x Z) x Z)| (maplet x1 x2) (|set.product (Z x Z) Z| s1 s2))
        (and (|set.in (Z x Z)| x1 s1) (|set.in Z| x2 s2)))))
  :named |ax.set.in.product.2 ((Z x Z) x Z)|))
(declare-fun |sub-sets (Z x Z)| (|POW (Z x Z)|) |POW POW (Z x Z)|)
(assert (!
  (forall ((s |POW (Z x Z)|) (t |POW (Z x Z)|))
    (=
      (|set.in POW (Z x Z)| s (|sub-sets (Z x Z)| t))
      (|set.subseteq (Z x Z)| s t)))
  :named |ax.sub-sets (Z x Z)|))
(declare-fun |set.product Z Z| (|POW Z| |POW Z|) |POW (Z x Z)|)
(assert (!
  (forall ((s1 |POW Z|) (s2 |POW Z|))
    (forall ((p |(Z x Z)|))
      (= (|set.in (Z x Z)| p (|set.product Z Z| s1 s2))
        (and (|set.in Z| (fst p) s1) (|set.in Z| (snd p) s2)))))
  :named |ax.set.in.product.1 (Z x Z)|))
(assert (!
  (forall ((s1 |POW Z|) (s2 |POW Z|))
    (forall ((x1 |Z|) (x2 |Z|))
      (= (|set.in (Z x Z)| (maplet x1 x2) (|set.product Z Z| s1 s2))
        (and (|set.in Z| x1 s1) (|set.in Z| x2 s2)))))
  :named |ax.set.in.product.2 (Z x Z)|))
(declare-fun |relations (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((X |POW (Z x Z)|) (Y |POW Z|))
    (= (|relations (Z x Z) Z| X Y)
       (|sub-sets ((Z x Z) x Z)| (|set.product (Z x Z) Z| X Y))))
    :named |def.relations ((Z x Z) x Z)|))
(declare-fun |functions (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((X |POW (Z x Z)|) (Y |POW Z|))
    (forall ((f |POW ((Z x Z) x Z)|))
      (= (|set.in POW ((Z x Z) x Z)| f (|functions (Z x Z) Z| X Y))
         (forall ((p1 |((Z x Z) x Z)|) (p2 |((Z x Z) x Z)|))
           (=> (and (|set.in ((Z x Z) x Z)| p1 f) (|set.in ((Z x Z) x Z)| p2 f) (= (fst p1) (fst p2)))
               (= (snd p1) (snd p2)))))))
:named |ax:set.in.functions ((Z x Z) x Z)|))
(declare-fun |rel.domain (Z x Z) Z| (|POW ((Z x Z) x Z)|) |POW (Z x Z)|)
(assert (!
  (forall ((r |POW ((Z x Z) x Z)|) (e |(Z x Z)|))
    (= (|set.in (Z x Z)| e (|rel.domain (Z x Z) Z| r))
       (exists ((y |Z|)) (|set.in ((Z x Z) x Z)| (maplet e y) r))))
  :named |ax:set.in.domain ((Z x Z) x Z)|))
(declare-fun |relations Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((X |POW Z|) (Y |POW Z|))
    (= (|relations Z Z| X Y)
       (|sub-sets (Z x Z)| (|set.product Z Z| X Y))))
    :named |def.relations (Z x Z)|))
(declare-fun |functions Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((X |POW Z|) (Y |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|functions Z Z| X Y))
         (forall ((p1 |(Z x Z)|) (p2 |(Z x Z)|))
           (=> (and (|set.in (Z x Z)| p1 f) (|set.in (Z x Z)| p2 f) (= (fst p1) (fst p2)))
               (= (snd p1) (snd p2)))))))
:named |ax:set.in.functions (Z x Z)|))
(declare-fun |rel.domain Z Z| (|POW (Z x Z)|) |POW Z|)
(assert (!
  (forall ((r |POW (Z x Z)|) (e |Z|))
    (= (|set.in Z| e (|rel.domain Z Z| r))
       (exists ((y |Z|)) (|set.in (Z x Z)| (maplet e y) r))))
  :named |ax:set.in.domain (Z x Z)|))
(declare-fun |functions.partial (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((e1 |POW (Z x Z)|) (e2 |POW Z|))
    (forall ((f |POW ((Z x Z) x Z)|))
      (= (|set.in POW ((Z x Z) x Z)| f (|functions.partial (Z x Z) Z| e1 e2))
         (and (|set.in POW ((Z x Z) x Z)| f (|relations (Z x Z) Z| e1 e2))
              (|set.in POW ((Z x Z) x Z)| f (|functions (Z x Z) Z| e1 e2))))))
  :named |ax:def.pfun ((Z x Z) x Z)|)
)
(declare-fun |relations.total (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((X |POW (Z x Z)|) (Y |POW Z|))
    (forall ((f |POW ((Z x Z) x Z)|))
      (= (|set.in POW ((Z x Z) x Z)| f (|relations.total (Z x Z) Z| X Y))
         (= (|rel.domain (Z x Z) Z| f) X))))
 :named |ax:set.in.relations.total ((Z x Z) x Z)|))
(declare-fun |functions.partial Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((e1 |POW Z|) (e2 |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|functions.partial Z Z| e1 e2))
         (and (|set.in POW (Z x Z)| f (|relations Z Z| e1 e2))
              (|set.in POW (Z x Z)| f (|functions Z Z| e1 e2))))))
  :named |ax:def.pfun (Z x Z)|)
)
(declare-fun |relations.total Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((X |POW Z|) (Y |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|relations.total Z Z| X Y))
         (= (|rel.domain Z Z| f) X))))
 :named |ax:set.in.relations.total (Z x Z)|))
(declare-fun |injections (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((X |POW (Z x Z)|) (Y |POW Z|) (f |POW ((Z x Z) x Z)|))
     (= (|set.in POW ((Z x Z) x Z)| f (|injections (Z x Z) Z| X Y))
        (forall ((p1 |((Z x Z) x Z)|) (p2 |((Z x Z) x Z)|))
          (=> (and (|set.in ((Z x Z) x Z)| p1 f) (|set.in ((Z x Z) x Z)| p2 f) (= (snd p1) (snd p2)))
              (= (fst p1) (fst p2))))))
  :named |ax:set.in.injections ((Z x Z) x Z)|))
(declare-fun |functions.total (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((e1 |POW (Z x Z)|) (e2 |POW Z|))
    (forall ((f |POW ((Z x Z) x Z)|))
      (= (|set.in POW ((Z x Z) x Z)| f (|functions.total (Z x Z) Z| e1 e2))
         (and (|set.in POW ((Z x Z) x Z)| f (|functions.partial (Z x Z) Z| e1 e2))
              (|set.in POW ((Z x Z) x Z)| f (|relations.total (Z x Z) Z| e1 e2))))))
  :named |ax:def.tfun ((Z x Z) x Z)|))
(declare-const s643 |POW ((Z x Z) x Z)|)
(assert (!
  (forall ((s |POW Z|) (t |POW Z|))
    (=
      (= s t)
      (forall ((e |Z|)) (= (|set.in Z| e s) (|set.in Z| e t)))))
  :named |ax.set.eq Z|))
(declare-fun |fun.eval (Z x Z) Z| (|POW ((Z x Z) x Z)| |(Z x Z)|) |Z|)
 (assert (!
    (forall ((f |POW ((Z x Z) x Z)|)(x |(Z x Z)|))
        (|set.in ((Z x Z) x Z)| (maplet x (|fun.eval (Z x Z) Z| f x)) f))
    :named |ax.fun.eval ((Z x Z) x Z)|))
(declare-fun |fun.eval Z Z| (|POW (Z x Z)| |Z|) |Z|)
 (assert (!
    (forall ((f |POW (Z x Z)|)(x |Z|))
        (|set.in (Z x Z)| (maplet x (|fun.eval Z Z| f x)) f))
    :named |ax.fun.eval (Z x Z)|))
(declare-const s646 |POW (Z x Z)|)
(declare-fun |functions.total Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((e1 |POW Z|) (e2 |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|functions.total Z Z| e1 e2))
         (and (|set.in POW (Z x Z)| f (|functions.partial Z Z| e1 e2))
              (|set.in POW (Z x Z)| f (|relations.total Z Z| e1 e2))))))
  :named |ax:def.tfun (Z x Z)|))
(declare-const s433 |POW Z|)
(declare-const s434 |POW Z|)
(declare-const s133 |POW Z|)
(declare-fun |injections.total (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((e1 |POW (Z x Z)|) (e2 |POW Z|))
    (forall ((f |POW ((Z x Z) x Z)|))
      (= (|set.in POW ((Z x Z) x Z)| f (|injections.total (Z x Z) Z| e1 e2))
         (and (|set.in POW ((Z x Z) x Z)| f (|functions.total (Z x Z) Z| e1 e2))
              (|set.in POW ((Z x Z) x Z)| f (|injections (Z x Z) Z| e1 e2))))))
 :named |ax:def.tinj ((Z x Z) x Z)|))
(declare-const s468 |POW Z|)
(declare-fun |set.subseteq Z| (|POW Z| |POW Z|) Bool)
(assert (!
    (forall ((s |POW Z|) (t |POW Z|))
      (=
        (|set.subseteq Z| s t)
        (forall ((e |Z|)) (=> (|set.in Z| e s) (|set.in Z| e t)))
      )
    )
    :named |ax.set.subseteq Z|))
(assert (!
  (= s433 s133)
  :named |Define:ctx:4|))
(assert (!
  (|set.in POW ((Z x Z) x Z)| s643 (|injections.total (Z x Z) Z| (|set.product Z Z| s434 s434) s434))
  :named |Define:ctx:5|))
(assert (!
  (|set.in POW (Z x Z)| s646 (|functions.total Z Z| s434 s434))
  :named |Define:ctx:6|))
(assert (!
  (forall
  ((s640 |Z|))
  (=>
    (|set.in Z| s640 s434)
    (= s640 (|fun.eval (Z x Z) Z| s643 (maplet (|fun.eval Z Z| s646 s640) (|fun.eval Z Z| s646 s640))))))
  :named |Define:ctx:7|))
(assert (!
  (not
    (|set.subseteq Z| s468 s468))
  :named |Goal|))
(check-sat)
(exit)
