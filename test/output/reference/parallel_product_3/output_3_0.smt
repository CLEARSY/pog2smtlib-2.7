(set-option :print-success false)
(set-logic HO_ALL)
(define-sort |BOOL| () Bool)
(define-sort |Z| () Int)
(declare-datatype C (par (T1 T2) ((maplet (fst T1) (snd T2)))))
(declare-sort P 1)
(define-sort |REAL| () Real)
(define-sort |(BOOL x Z)| () (C |BOOL| |Z|))
(define-sort |POW BOOL| () (P |BOOL|))
(define-sort |POW Z| () (P |Z|))
(define-sort |(Z x Z)| () (C |Z| |Z|))
(define-sort |(REAL x Z)| () (C |REAL| |Z|))
(define-sort |POW REAL| () (P |REAL|))
(define-sort |((BOOL x Z) x REAL)| () (C |(BOOL x Z)| |REAL|))
(declare-fun |set.in BOOL| (|BOOL| |POW BOOL|) Bool)
(define-sort |POW (BOOL x Z)| () (P |(BOOL x Z)|))
(declare-fun |set.in Z| (|Z| |POW Z|) Bool)
(define-sort |((Z x Z) x Z)| () (C |(Z x Z)| |Z|))
(define-sort |POW (Z x Z)| () (P |(Z x Z)|))
(define-sort |POW (REAL x Z)| () (P |(REAL x Z)|))
(declare-fun |set.in REAL| (|REAL| |POW REAL|) Bool)
(define-sort |((Z x Z) x (REAL x Z))| () (C |(Z x Z)| |(REAL x Z)|))
(define-sort |(Z x REAL)| () (C |Z| |REAL|))
(define-sort |(Z x BOOL)| () (C |Z| |BOOL|))
(define-sort |((Z x Z) x (BOOL x Z))| () (C |(Z x Z)| |(BOOL x Z)|))
(define-sort |POW ((BOOL x Z) x REAL)| () (P |((BOOL x Z) x REAL)|))
(declare-fun |set.in (BOOL x Z)| (|(BOOL x Z)| |POW (BOOL x Z)|) Bool)
(define-sort |POW ((Z x Z) x Z)| () (P |((Z x Z) x Z)|))
(declare-fun |set.in (Z x Z)| (|(Z x Z)| |POW (Z x Z)|) Bool)
(define-sort |(((Z x Z) x Z) x ((BOOL x Z) x REAL))| () (C |((Z x Z) x Z)| |((BOOL x Z) x REAL)|))
(declare-fun |set.in (REAL x Z)| (|(REAL x Z)| |POW (REAL x Z)|) Bool)
(define-sort |POW ((Z x Z) x (REAL x Z))| () (P |((Z x Z) x (REAL x Z))|))
(define-sort |POW (Z x REAL)| () (P |(Z x REAL)|))
(define-sort |POW (Z x BOOL)| () (P |(Z x BOOL)|))
(define-sort |POW ((Z x Z) x (BOOL x Z))| () (P |((Z x Z) x (BOOL x Z))|))
(declare-fun |set.in ((BOOL x Z) x REAL)| (|((BOOL x Z) x REAL)| |POW ((BOOL x Z) x REAL)|) Bool)
(declare-fun |set.in ((Z x Z) x Z)| (|((Z x Z) x Z)| |POW ((Z x Z) x Z)|) Bool)
(define-sort |POW (((Z x Z) x Z) x ((BOOL x Z) x REAL))| () (P |(((Z x Z) x Z) x ((BOOL x Z) x REAL))|))
(declare-fun |set.in ((Z x Z) x (REAL x Z))| (|((Z x Z) x (REAL x Z))| |POW ((Z x Z) x (REAL x Z))|) Bool)
(declare-fun |set.in (Z x REAL)| (|(Z x REAL)| |POW (Z x REAL)|) Bool)
(declare-fun |set.in (Z x BOOL)| (|(Z x BOOL)| |POW (Z x BOOL)|) Bool)
(declare-fun |set.in ((Z x Z) x (BOOL x Z))| (|((Z x Z) x (BOOL x Z))| |POW ((Z x Z) x (BOOL x Z))|) Bool)
(declare-fun |set.in (((Z x Z) x Z) x ((BOOL x Z) x REAL))| (|(((Z x Z) x Z) x ((BOOL x Z) x REAL))| |POW (((Z x Z) x Z) x ((BOOL x Z) x REAL))|) Bool)
(assert (!
  (forall ((s |POW ((Z x Z) x (REAL x Z))|) (t |POW ((Z x Z) x (REAL x Z))|))
    (=
      (= s t)
      (forall ((e |((Z x Z) x (REAL x Z))|)) (= (|set.in ((Z x Z) x (REAL x Z))| e s) (|set.in ((Z x Z) x (REAL x Z))| e t)))))
  :named |ax.set.eq ((Z x Z) x (REAL x Z))|))
(declare-fun |parallelproduct Z REAL Z Z| (|POW (Z x REAL)| |POW (Z x Z)|) |POW ((Z x Z) x (REAL x Z))|)
(assert (!
  (forall ((R1 |POW (Z x REAL)|) (R2 |POW (Z x Z)|) (p |((Z x Z) x (REAL x Z))|))
    (= (|set.in ((Z x Z) x (REAL x Z))| p (|parallelproduct Z REAL Z Z| R1 R2))
       (and
         (|set.in (Z x REAL)| (maplet (fst (fst p)) (fst (snd p))) R1)
         (|set.in (Z x Z)| (maplet (snd (fst p)) (snd (snd p))) R2)
       )
    )
  )
  :named |ax.set.in.parallelproduct Z REAL Z Z|))
(declare-fun |parallelproduct Z BOOL Z Z| (|POW (Z x BOOL)| |POW (Z x Z)|) |POW ((Z x Z) x (BOOL x Z))|)
(assert (!
  (forall ((R1 |POW (Z x BOOL)|) (R2 |POW (Z x Z)|) (p |((Z x Z) x (BOOL x Z))|))
    (= (|set.in ((Z x Z) x (BOOL x Z))| p (|parallelproduct Z BOOL Z Z| R1 R2))
       (and
         (|set.in (Z x BOOL)| (maplet (fst (fst p)) (fst (snd p))) R1)
         (|set.in (Z x Z)| (maplet (snd (fst p)) (snd (snd p))) R2)
       )
    )
  )
  :named |ax.set.in.parallelproduct Z BOOL Z Z|))
(declare-const co4 |(Z x Z)|)
(assert (!
  (forall ((s |POW (((Z x Z) x Z) x ((BOOL x Z) x REAL))|) (t |POW (((Z x Z) x Z) x ((BOOL x Z) x REAL))|))
    (=
      (= s t)
      (forall ((e |(((Z x Z) x Z) x ((BOOL x Z) x REAL))|)) (= (|set.in (((Z x Z) x Z) x ((BOOL x Z) x REAL))| e s) (|set.in (((Z x Z) x Z) x ((BOOL x Z) x REAL))| e t)))))
  :named |ax.set.eq (((Z x Z) x Z) x ((BOOL x Z) x REAL))|))
(declare-const co3 |(Z x REAL)|)
(declare-const co2 |(Z x Z)|)
(define-sort |? ((Z x Z) x (REAL x Z))| () (-> |((Z x Z) x (REAL x Z))| Bool))
(declare-const |set.intent ((Z x Z) x (REAL x Z))| (-> |? ((Z x Z) x (REAL x Z))| |POW ((Z x Z) x (REAL x Z))|))
(assert (!
  (forall ((p |? ((Z x Z) x (REAL x Z))|))
    (forall ((x |((Z x Z) x (REAL x Z))|))
      (= (|set.in ((Z x Z) x (REAL x Z))| x (|set.intent ((Z x Z) x (REAL x Z))| p))
         (p x))))
  :named |ax:set.in.intent ((Z x Z) x (REAL x Z))|))
(define-sort |? (Z x Z)| () (-> |(Z x Z)| Bool))
(declare-const |set.intent (Z x Z)| (-> |? (Z x Z)| |POW (Z x Z)|))
(assert (!
  (forall ((p |? (Z x Z)|))
    (forall ((x |(Z x Z)|))
      (= (|set.in (Z x Z)| x (|set.intent (Z x Z)| p))
         (p x))))
  :named |ax:set.in.intent (Z x Z)|))
(declare-const co1 |(Z x BOOL)|)
(declare-fun |parallelproduct (Z x Z) (BOOL x Z) Z REAL| (|POW ((Z x Z) x (BOOL x Z))| |POW (Z x REAL)|) |POW (((Z x Z) x Z) x ((BOOL x Z) x REAL))|)
(assert (!
  (forall ((R1 |POW ((Z x Z) x (BOOL x Z))|) (R2 |POW (Z x REAL)|) (p |(((Z x Z) x Z) x ((BOOL x Z) x REAL))|))
    (= (|set.in (((Z x Z) x Z) x ((BOOL x Z) x REAL))| p (|parallelproduct (Z x Z) (BOOL x Z) Z REAL| R1 R2))
       (and
         (|set.in ((Z x Z) x (BOOL x Z))| (maplet (fst (fst p)) (fst (snd p))) R1)
         (|set.in (Z x REAL)| (maplet (snd (fst p)) (snd (snd p))) R2)
       )
    )
  )
  :named |ax.set.in.parallelproduct (Z x Z) (BOOL x Z) Z REAL|))
(define-sort |? (Z x BOOL)| () (-> |(Z x BOOL)| Bool))
(declare-const |set.intent (Z x BOOL)| (-> |? (Z x BOOL)| |POW (Z x BOOL)|))
(assert (!
  (forall ((p |? (Z x BOOL)|))
    (forall ((x |(Z x BOOL)|))
      (= (|set.in (Z x BOOL)| x (|set.intent (Z x BOOL)| p))
         (p x))))
  :named |ax:set.in.intent (Z x BOOL)|))
(define-sort |? (Z x REAL)| () (-> |(Z x REAL)| Bool))
(declare-const |set.intent (Z x REAL)| (-> |? (Z x REAL)| |POW (Z x REAL)|))
(assert (!
  (forall ((p |? (Z x REAL)|))
    (forall ((x |(Z x REAL)|))
      (= (|set.in (Z x REAL)| x (|set.intent (Z x REAL)| p))
         (p x))))
  :named |ax:set.in.intent (Z x REAL)|))
(define-sort |? (((Z x Z) x Z) x ((BOOL x Z) x REAL))| () (-> |(((Z x Z) x Z) x ((BOOL x Z) x REAL))| Bool))
(declare-const |set.intent (((Z x Z) x Z) x ((BOOL x Z) x REAL))| (-> |? (((Z x Z) x Z) x ((BOOL x Z) x REAL))| |POW (((Z x Z) x Z) x ((BOOL x Z) x REAL))|))
(assert (!
  (forall ((p |? (((Z x Z) x Z) x ((BOOL x Z) x REAL))|))
    (forall ((x |(((Z x Z) x Z) x ((BOOL x Z) x REAL))|))
      (= (|set.in (((Z x Z) x Z) x ((BOOL x Z) x REAL))| x (|set.intent (((Z x Z) x Z) x ((BOOL x Z) x REAL))| p))
         (p x))))
  :named |ax:set.in.intent (((Z x Z) x Z) x ((BOOL x Z) x REAL))|))
(define-sort |? ((Z x Z) x (BOOL x Z))| () (-> |((Z x Z) x (BOOL x Z))| Bool))
(declare-const |set.intent ((Z x Z) x (BOOL x Z))| (-> |? ((Z x Z) x (BOOL x Z))| |POW ((Z x Z) x (BOOL x Z))|))
(assert (!
  (forall ((p |? ((Z x Z) x (BOOL x Z))|))
    (forall ((x |((Z x Z) x (BOOL x Z))|))
      (= (|set.in ((Z x Z) x (BOOL x Z))| x (|set.intent ((Z x Z) x (BOOL x Z))| p))
         (p x))))
  :named |ax:set.in.intent ((Z x Z) x (BOOL x Z))|))
(assert (!
  (forall ((s |POW ((Z x Z) x (BOOL x Z))|) (t |POW ((Z x Z) x (BOOL x Z))|))
    (=
      (= s t)
      (forall ((e |((Z x Z) x (BOOL x Z))|)) (= (|set.in ((Z x Z) x (BOOL x Z))| e s) (|set.in ((Z x Z) x (BOOL x Z))| e t)))))
  :named |ax.set.eq ((Z x Z) x (BOOL x Z))|))
(define-sort |((Z x Z) x (Z x Z))| () (C |(Z x Z)| |(Z x Z)|))
(define-sort |((BOOL x Z) x (REAL x Z))| () (C |(BOOL x Z)| |(REAL x Z)|))
(define-sort |POW ((Z x Z) x (Z x Z))| () (P |((Z x Z) x (Z x Z))|))
(define-sort |(((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| () (C |((Z x Z) x (Z x Z))| |((BOOL x Z) x (REAL x Z))|))
(define-sort |POW ((BOOL x Z) x (REAL x Z))| () (P |((BOOL x Z) x (REAL x Z))|))
(declare-fun |set.in ((Z x Z) x (Z x Z))| (|((Z x Z) x (Z x Z))| |POW ((Z x Z) x (Z x Z))|) Bool)
(define-sort |POW (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| () (P |(((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|))
(declare-fun |set.in ((BOOL x Z) x (REAL x Z))| (|((BOOL x Z) x (REAL x Z))| |POW ((BOOL x Z) x (REAL x Z))|) Bool)
(declare-fun |set.in (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| (|(((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| |POW (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|) Bool)
(declare-fun |parallelproduct (Z x Z) (BOOL x Z) (Z x Z) (REAL x Z)| (|POW ((Z x Z) x (BOOL x Z))| |POW ((Z x Z) x (REAL x Z))|) |POW (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|)
(assert (!
  (forall ((R1 |POW ((Z x Z) x (BOOL x Z))|) (R2 |POW ((Z x Z) x (REAL x Z))|) (p |(((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|))
    (= (|set.in (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| p (|parallelproduct (Z x Z) (BOOL x Z) (Z x Z) (REAL x Z)| R1 R2))
       (and
         (|set.in ((Z x Z) x (BOOL x Z))| (maplet (fst (fst p)) (fst (snd p))) R1)
         (|set.in ((Z x Z) x (REAL x Z))| (maplet (snd (fst p)) (snd (snd p))) R2)
       )
    )
  )
  :named |ax.set.in.parallelproduct (Z x Z) (BOOL x Z) (Z x Z) (REAL x Z)|))
(define-sort |? (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| () (-> |(((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| Bool))
(declare-const |set.intent (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| (-> |? (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| |POW (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|))
(assert (!
  (forall ((p |? (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|))
    (forall ((x |(((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|))
      (= (|set.in (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| x (|set.intent (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| p))
         (p x))))
  :named |ax:set.in.intent (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|))
(assert (!
  (forall ((s |POW (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|) (t |POW (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|))
    (=
      (= s t)
      (forall ((e |(((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|)) (= (|set.in (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| e s) (|set.in (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| e t)))))
  :named |ax.set.eq (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|))
(assert (!
  (= co1 (maplet 10 true))
  :named |Define:lprp:1|))
(assert (!
  (= co2 (maplet 20 21))
  :named |Define:lprp:2|))
(assert (!
  (= co3 (maplet 30 3.1))
  :named |Define:lprp:3|))
(assert (!
  (= co4 (maplet 40 41))
  :named |Define:lprp:4|))
(assert (!
  (= (|parallelproduct Z BOOL Z Z| (|set.intent (Z x BOOL)| (lambda ((_c0 |(Z x BOOL)|)) (= _c0 co1))) (|set.intent (Z x Z)| (lambda ((_c0 |(Z x Z)|)) (= _c0 co2)))) (|set.intent ((Z x Z) x (BOOL x Z))| (lambda ((_c0 |((Z x Z) x (BOOL x Z))|)) (= _c0 (maplet (maplet 10 20) (maplet true 21))))))
  :named |Hypothesis:1|))
(assert (!
  (= (|parallelproduct (Z x Z) (BOOL x Z) Z REAL| (|parallelproduct Z BOOL Z Z| (|set.intent (Z x BOOL)| (lambda ((_c0 |(Z x BOOL)|)) (= _c0 co1))) (|set.intent (Z x Z)| (lambda ((_c0 |(Z x Z)|)) (= _c0 co2)))) (|set.intent (Z x REAL)| (lambda ((_c0 |(Z x REAL)|)) (= _c0 co3)))) (|set.intent (((Z x Z) x Z) x ((BOOL x Z) x REAL))| (lambda ((_c0 |(((Z x Z) x Z) x ((BOOL x Z) x REAL))|)) (= _c0 (maplet (maplet (maplet 10 20) 30) (maplet (maplet true 21) 3.1))))))
  :named |Hypothesis:2|))
(assert (!
  (= (|parallelproduct Z REAL Z Z| (|set.intent (Z x REAL)| (lambda ((_c0 |(Z x REAL)|)) (= _c0 co3))) (|set.intent (Z x Z)| (lambda ((_c0 |(Z x Z)|)) (= _c0 co4)))) (|set.intent ((Z x Z) x (REAL x Z))| (lambda ((_c0 |((Z x Z) x (REAL x Z))|)) (= _c0 (maplet (maplet 30 40) (maplet 3.1 41))))))
  :named |Hypothesis:3|))
(assert (!
  (not
    (= (|parallelproduct (Z x Z) (BOOL x Z) (Z x Z) (REAL x Z)| (|parallelproduct Z BOOL Z Z| (|set.intent (Z x BOOL)| (lambda ((_c0 |(Z x BOOL)|)) (= _c0 co1))) (|set.intent (Z x Z)| (lambda ((_c0 |(Z x Z)|)) (= _c0 co2)))) (|parallelproduct Z REAL Z Z| (|set.intent (Z x REAL)| (lambda ((_c0 |(Z x REAL)|)) (= _c0 co3))) (|set.intent (Z x Z)| (lambda ((_c0 |(Z x Z)|)) (= _c0 co4))))) (|set.intent (((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))| (lambda ((_c0 |(((Z x Z) x (Z x Z)) x ((BOOL x Z) x (REAL x Z)))|)) (= _c0 (maplet (maplet (maplet 10 20) (maplet 30 40)) (maplet (maplet true 21) (maplet 3.1 41))))))))
  :named |Goal|))
(check-sat)
(exit)
