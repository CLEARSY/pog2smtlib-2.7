(set-option :print-success false)
(set-logic HO_ALL)
(define-sort |Z| () Int)
(declare-sort P 1)
(define-sort |POW Z| () (P |Z|))
(define-const MININT |Z| (- 2147483648))
(define-const MAXINT |Z| 2147483647)
(declare-fun |set.in Z| (|Z| |POW Z|) Bool)
(declare-const INT |POW Z|)
(assert (!
  (forall ((e |Z|)) (= (|set.in Z| e INT) (and (<= MININT e) (<= e MAXINT))))
  :named |ax.set.in.INT|))
(assert (!
  (forall ((s |POW Z|) (t |POW Z|))
    (=
      (= s t)
      (forall ((e |Z|)) (= (|set.in Z| e s) (|set.in Z| e t)))))
  :named |ax.set.eq Z|))
(declare-const s405 |POW Z|)
(declare-fun |set.subseteq Z| (|POW Z| |POW Z|) Bool)
(assert (!
    (forall ((s |POW Z|) (t |POW Z|))
      (=
        (|set.subseteq Z| s t)
        (forall ((e |Z|)) (=> (|set.in Z| e s) (|set.in Z| e t)))
      )
    )
    :named |ax.set.subseteq Z|))
(declare-fun |interval| (|Z| |Z|) |POW Z|)
 (assert (!
    (forall ((l |Z|) (u |Z|) (e |Z|))
        (= (|set.in Z| e (|interval| l u))
            (and (<= l e) (<= e u))))
    :named |ax.set.in.interval|))
(declare-const s129 |POW Z|)
(declare-const s586 |POW Z|)
(declare-const s403 |Z|)
(declare-const s626 |POW Z|)
(declare-const NAT |POW Z|)
(assert (!
  (forall ((e |Z|)) (= (|set.in Z| e NAT) (and (<= 0 e) (<= e MAXINT))))
  :named |ax.set.in.NAT|))
(declare-datatype C (par (T1 T2) ((maplet (fst T1) (snd T2)))))
(define-sort |(Z x Z)| () (C |Z| |Z|))
(define-sort |POW (Z x Z)| () (P |(Z x Z)|))
(define-sort |((Z x Z) x Z)| () (C |(Z x Z)| |Z|))
(define-sort |(Z x POW (Z x Z))| () (C |Z| |POW (Z x Z)|))
(define-sort |POW POW (Z x Z)| () (P |POW (Z x Z)|))
(declare-fun |set.in (Z x Z)| (|(Z x Z)| |POW (Z x Z)|) Bool)
(define-sort |POW ((Z x Z) x Z)| () (P |((Z x Z) x Z)|))
(define-sort |POW (Z x POW (Z x Z))| () (P |(Z x POW (Z x Z))|))
(declare-fun |set.in POW (Z x Z)| (|POW (Z x Z)| |POW POW (Z x Z)|) Bool)
(declare-fun |set.in ((Z x Z) x Z)| (|((Z x Z) x Z)| |POW ((Z x Z) x Z)|) Bool)
(define-sort |POW POW ((Z x Z) x Z)| () (P |POW ((Z x Z) x Z)|))
(declare-fun |set.subseteq (Z x Z)| (|POW (Z x Z)| |POW (Z x Z)|) Bool)
(assert (!
    (forall ((s |POW (Z x Z)|) (t |POW (Z x Z)|))
      (=
        (|set.subseteq (Z x Z)| s t)
        (forall ((e |(Z x Z)|)) (=> (|set.in (Z x Z)| e s) (|set.in (Z x Z)| e t)))
      )
    )
    :named |ax.set.subseteq (Z x Z)|))
(declare-fun |set.in (Z x POW (Z x Z))| (|(Z x POW (Z x Z))| |POW (Z x POW (Z x Z))|) Bool)
(define-sort |POW POW (Z x POW (Z x Z))| () (P |POW (Z x POW (Z x Z))|))
(declare-fun |rel.range (Z x Z) Z| (|POW ((Z x Z) x Z)|) |POW Z|)
(assert (!
  (forall ((r |POW ((Z x Z) x Z)|) (e |Z|))
    (= (|set.in Z| e (|rel.range (Z x Z) Z| r))
       (exists ((x |(Z x Z)|)) (|set.in ((Z x Z) x Z)| (maplet x e) r))))
  :named |ax:set.in.range ((Z x Z) x Z)|))
(assert (!
  (forall ((s |POW (Z x Z)|) (t |POW (Z x Z)|))
    (=
      (= s t)
      (forall ((e |(Z x Z)|)) (= (|set.in (Z x Z)| e s) (|set.in (Z x Z)| e t)))))
  :named |ax.set.eq (Z x Z)|))
(declare-fun |set.in POW ((Z x Z) x Z)| (|POW ((Z x Z) x Z)| |POW POW ((Z x Z) x Z)|) Bool)
(declare-fun |rel.range Z Z| (|POW (Z x Z)|) |POW Z|)
(assert (!
  (forall ((r |POW (Z x Z)|) (e |Z|))
    (= (|set.in Z| e (|rel.range Z Z| r))
       (exists ((x |Z|)) (|set.in (Z x Z)| (maplet x e) r))))
  :named |ax:set.in.range (Z x Z)|))
(declare-fun |sub-sets (Z x Z)| (|POW (Z x Z)|) |POW POW (Z x Z)|)
(assert (!
  (forall ((s |POW (Z x Z)|) (t |POW (Z x Z)|))
    (=
      (|set.in POW (Z x Z)| s (|sub-sets (Z x Z)| t))
      (|set.subseteq (Z x Z)| s t)))
  :named |ax.sub-sets (Z x Z)|))
(declare-fun |set.product Z Z| (|POW Z| |POW Z|) |POW (Z x Z)|)
(assert (!
  (forall ((s1 |POW Z|) (s2 |POW Z|))
    (forall ((p |(Z x Z)|))
      (= (|set.in (Z x Z)| p (|set.product Z Z| s1 s2))
        (and (|set.in Z| (fst p) s1) (|set.in Z| (snd p) s2)))))
  :named |ax.set.in.product.1 (Z x Z)|))
(assert (!
  (forall ((s1 |POW Z|) (s2 |POW Z|))
    (forall ((x1 |Z|) (x2 |Z|))
      (= (|set.in (Z x Z)| (maplet x1 x2) (|set.product Z Z| s1 s2))
        (and (|set.in Z| x1 s1) (|set.in Z| x2 s2)))))
  :named |ax.set.in.product.2 (Z x Z)|))
(declare-fun |set.subseteq (Z x POW (Z x Z))| (|POW (Z x POW (Z x Z))| |POW (Z x POW (Z x Z))|) Bool)
(assert (!
    (forall ((s |POW (Z x POW (Z x Z))|) (t |POW (Z x POW (Z x Z))|))
      (=
        (|set.subseteq (Z x POW (Z x Z))| s t)
        (forall ((e |(Z x POW (Z x Z))|)) (=> (|set.in (Z x POW (Z x Z))| e s) (|set.in (Z x POW (Z x Z))| e t)))
      )
    )
    :named |ax.set.subseteq (Z x POW (Z x Z))|))
(declare-fun |set.in POW (Z x POW (Z x Z))| (|POW (Z x POW (Z x Z))| |POW POW (Z x POW (Z x Z))|) Bool)
(declare-fun |surjections (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((X |POW (Z x Z)|) (Y |POW Z|))
    (forall ((f |POW ((Z x Z) x Z)|))
      (= (|set.in POW ((Z x Z) x Z)| f (|surjections (Z x Z) Z| X Y))
         (= (|rel.range (Z x Z) Z| f) Y)
      )))
  :named |ax:set.in.surjections ((Z x Z) x Z)|))
(declare-fun |injections (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((X |POW (Z x Z)|) (Y |POW Z|) (f |POW ((Z x Z) x Z)|))
     (= (|set.in POW ((Z x Z) x Z)| f (|injections (Z x Z) Z| X Y))
        (forall ((p1 |((Z x Z) x Z)|) (p2 |((Z x Z) x Z)|))
          (=> (and (|set.in ((Z x Z) x Z)| p1 f) (|set.in ((Z x Z) x Z)| p2 f) (= (snd p1) (snd p2)))
              (= (fst p1) (fst p2))))))
  :named |ax:set.in.injections ((Z x Z) x Z)|))
(declare-fun |surjections Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((X |POW Z|) (Y |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|surjections Z Z| X Y))
         (= (|rel.range Z Z| f) Y)
      )))
  :named |ax:set.in.surjections (Z x Z)|))
(declare-fun |injections Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((X |POW Z|) (Y |POW Z|) (f |POW (Z x Z)|))
     (= (|set.in POW (Z x Z)| f (|injections Z Z| X Y))
        (forall ((p1 |(Z x Z)|) (p2 |(Z x Z)|))
          (=> (and (|set.in (Z x Z)| p1 f) (|set.in (Z x Z)| p2 f) (= (snd p1) (snd p2)))
              (= (fst p1) (fst p2))))))
  :named |ax:set.in.injections (Z x Z)|))
(declare-fun |relations Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((X |POW Z|) (Y |POW Z|))
    (= (|relations Z Z| X Y)
       (|sub-sets (Z x Z)| (|set.product Z Z| X Y))))
    :named |def.relations (Z x Z)|))
(declare-fun |functions Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((X |POW Z|) (Y |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|functions Z Z| X Y))
         (forall ((p1 |(Z x Z)|) (p2 |(Z x Z)|))
           (=> (and (|set.in (Z x Z)| p1 f) (|set.in (Z x Z)| p2 f) (= (fst p1) (fst p2)))
               (= (snd p1) (snd p2)))))))
:named |ax:set.in.functions (Z x Z)|))
(declare-fun |rel.domain Z Z| (|POW (Z x Z)|) |POW Z|)
(assert (!
  (forall ((r |POW (Z x Z)|) (e |Z|))
    (= (|set.in Z| e (|rel.domain Z Z| r))
       (exists ((y |Z|)) (|set.in (Z x Z)| (maplet e y) r))))
  :named |ax:set.in.domain (Z x Z)|))
(declare-fun |sub-sets (Z x POW (Z x Z))| (|POW (Z x POW (Z x Z))|) |POW POW (Z x POW (Z x Z))|)
(assert (!
  (forall ((s |POW (Z x POW (Z x Z))|) (t |POW (Z x POW (Z x Z))|))
    (=
      (|set.in POW (Z x POW (Z x Z))| s (|sub-sets (Z x POW (Z x Z))| t))
      (|set.subseteq (Z x POW (Z x Z))| s t)))
  :named |ax.sub-sets (Z x POW (Z x Z))|))
(declare-fun |set.product Z POW (Z x Z)| (|POW Z| |POW POW (Z x Z)|) |POW (Z x POW (Z x Z))|)
(assert (!
  (forall ((s1 |POW Z|) (s2 |POW POW (Z x Z)|))
    (forall ((p |(Z x POW (Z x Z))|))
      (= (|set.in (Z x POW (Z x Z))| p (|set.product Z POW (Z x Z)| s1 s2))
        (and (|set.in Z| (fst p) s1) (|set.in POW (Z x Z)| (snd p) s2)))))
  :named |ax.set.in.product.1 (Z x POW (Z x Z))|))
(assert (!
  (forall ((s1 |POW Z|) (s2 |POW POW (Z x Z)|))
    (forall ((x1 |Z|) (x2 |POW (Z x Z)|))
      (= (|set.in (Z x POW (Z x Z))| (maplet x1 x2) (|set.product Z POW (Z x Z)| s1 s2))
        (and (|set.in Z| x1 s1) (|set.in POW (Z x Z)| x2 s2)))))
  :named |ax.set.in.product.2 (Z x POW (Z x Z))|))
(declare-fun |bijections (Z x Z) Z| (|POW (Z x Z)| |POW Z|) |POW POW ((Z x Z) x Z)|)
(assert (!
  (forall ((X |POW (Z x Z)|) (Y |POW Z|))
    (forall ((f |POW ((Z x Z) x Z)|))
      (= (|set.in POW ((Z x Z) x Z)| f (|bijections (Z x Z) Z| X Y))
         (and (|set.in POW ((Z x Z) x Z)| f (|injections (Z x Z) Z| X Y))
              (|set.in POW ((Z x Z) x Z)| f (|surjections (Z x Z) Z| X Y))))))
  :named |ax:set.in.bijections ((Z x Z) x Z)|))
(declare-datatype Cardinals ( ( Infinite ) ( Finite ( Value Int ) )))
(declare-fun |bijections Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((X |POW Z|) (Y |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|bijections Z Z| X Y))
         (and (|set.in POW (Z x Z)| f (|injections Z Z| X Y))
              (|set.in POW (Z x Z)| f (|surjections Z Z| X Y))))))
  :named |ax:set.in.bijections (Z x Z)|))
(declare-fun |functions.partial Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((e1 |POW Z|) (e2 |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|functions.partial Z Z| e1 e2))
         (and (|set.in POW (Z x Z)| f (|relations Z Z| e1 e2))
              (|set.in POW (Z x Z)| f (|functions Z Z| e1 e2))))))
  :named |ax:def.pfun (Z x Z)|)
)
(declare-fun |relations.total Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((X |POW Z|) (Y |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|relations.total Z Z| X Y))
         (= (|rel.domain Z Z| f) X))))
 :named |ax:set.in.relations.total (Z x Z)|))
(declare-fun |relations Z POW (Z x Z)| (|POW Z| |POW POW (Z x Z)|) |POW POW (Z x POW (Z x Z))|)
(assert (!
  (forall ((X |POW Z|) (Y |POW POW (Z x Z)|))
    (= (|relations Z POW (Z x Z)| X Y)
       (|sub-sets (Z x POW (Z x Z))| (|set.product Z POW (Z x Z)| X Y))))
    :named |def.relations (Z x POW (Z x Z))|))
(declare-fun |functions Z POW (Z x Z)| (|POW Z| |POW POW (Z x Z)|) |POW POW (Z x POW (Z x Z))|)
(assert (!
  (forall ((X |POW Z|) (Y |POW POW (Z x Z)|))
    (forall ((f |POW (Z x POW (Z x Z))|))
      (= (|set.in POW (Z x POW (Z x Z))| f (|functions Z POW (Z x Z)| X Y))
         (forall ((p1 |(Z x POW (Z x Z))|) (p2 |(Z x POW (Z x Z))|))
           (=> (and (|set.in (Z x POW (Z x Z))| p1 f) (|set.in (Z x POW (Z x Z))| p2 f) (= (fst p1) (fst p2)))
               (= (snd p1) (snd p2)))))))
:named |ax:set.in.functions (Z x POW (Z x Z))|))
(declare-fun |rel.domain Z POW (Z x Z)| (|POW (Z x POW (Z x Z))|) |POW Z|)
(assert (!
  (forall ((r |POW (Z x POW (Z x Z))|) (e |Z|))
    (= (|set.in Z| e (|rel.domain Z POW (Z x Z)| r))
       (exists ((y |POW (Z x Z)|)) (|set.in (Z x POW (Z x Z))| (maplet e y) r))))
  :named |ax:set.in.domain (Z x POW (Z x Z))|))
(declare-fun |set.subseteq POW (Z x Z)| (|POW POW (Z x Z)| |POW POW (Z x Z)|) Bool)
(assert (!
    (forall ((s |POW POW (Z x Z)|) (t |POW POW (Z x Z)|))
      (=
        (|set.subseteq POW (Z x Z)| s t)
        (forall ((e |POW (Z x Z)|)) (=> (|set.in POW (Z x Z)| e s) (|set.in POW (Z x Z)| e t)))
      )
    )
    :named |ax.set.subseteq POW (Z x Z)|))
(declare-fun |card (Z x Z)| (|POW (Z x Z)|) Cardinals)
(assert (!
  (forall ((s |POW (Z x Z)|))
    (or (= (|card (Z x Z)| s) Infinite)
        (exists ((f |POW ((Z x Z) x Z)|))
          (|set.in POW ((Z x Z) x Z)| f (|bijections (Z x Z) Z| s (|interval| 1 (Value (|card (Z x Z)| s))))))))
  :named |ax.card.definition (Z x Z)|))
(declare-fun |card Z| (|POW Z|) Cardinals)
(assert (!
  (forall ((s |POW Z|))
    (or (= (|card Z| s) Infinite)
        (exists ((f |POW (Z x Z)|))
          (|set.in POW (Z x Z)| f (|bijections Z Z| s (|interval| 1 (Value (|card Z| s))))))))
  :named |ax.card.definition Z|))
(declare-fun |functions.total Z Z| (|POW Z| |POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((e1 |POW Z|) (e2 |POW Z|))
    (forall ((f |POW (Z x Z)|))
      (= (|set.in POW (Z x Z)| f (|functions.total Z Z| e1 e2))
         (and (|set.in POW (Z x Z)| f (|functions.partial Z Z| e1 e2))
              (|set.in POW (Z x Z)| f (|relations.total Z Z| e1 e2))))))
  :named |ax:def.tfun (Z x Z)|))
(declare-fun |functions.partial Z POW (Z x Z)| (|POW Z| |POW POW (Z x Z)|) |POW POW (Z x POW (Z x Z))|)
(assert (!
  (forall ((e1 |POW Z|) (e2 |POW POW (Z x Z)|))
    (forall ((f |POW (Z x POW (Z x Z))|))
      (= (|set.in POW (Z x POW (Z x Z))| f (|functions.partial Z POW (Z x Z)| e1 e2))
         (and (|set.in POW (Z x POW (Z x Z))| f (|relations Z POW (Z x Z)| e1 e2))
              (|set.in POW (Z x POW (Z x Z))| f (|functions Z POW (Z x Z)| e1 e2))))))
  :named |ax:def.pfun (Z x POW (Z x Z))|)
)
(declare-fun |relations.total Z POW (Z x Z)| (|POW Z| |POW POW (Z x Z)|) |POW POW (Z x POW (Z x Z))|)
(assert (!
  (forall ((X |POW Z|) (Y |POW POW (Z x Z)|))
    (forall ((f |POW (Z x POW (Z x Z))|))
      (= (|set.in POW (Z x POW (Z x Z))| f (|relations.total Z POW (Z x Z)| X Y))
         (= (|rel.domain Z POW (Z x Z)| f) X))))
 :named |ax:set.in.relations.total (Z x POW (Z x Z))|))
(declare-const s788 |Z|)
(declare-fun |seq Z| (|POW Z|) |POW POW (Z x Z)|)
(assert (!
  (forall ((E |POW Z|) (s |POW (Z x Z)|))
    (=>
      (|set.in POW (Z x Z)| s (|seq Z| E))
      ((_ is Finite) (|card (Z x Z)| s))))
  :named |ax.seq.is.finite Z|))
(assert (!
  (forall ((E |POW Z|))
    (|set.subseteq POW (Z x Z)|
      (|seq Z| E)
      (|functions.total Z Z| (|interval| 1 (Value (|card Z| E))) E)))
  :named |ax.seq.is.total.fun Z|))
(declare-const s787 |POW (Z x POW (Z x Z))|)
(declare-const s169 |POW Z|)
(declare-fun |functions.total Z POW (Z x Z)| (|POW Z| |POW POW (Z x Z)|) |POW POW (Z x POW (Z x Z))|)
(assert (!
  (forall ((e1 |POW Z|) (e2 |POW POW (Z x Z)|))
    (forall ((f |POW (Z x POW (Z x Z))|))
      (= (|set.in POW (Z x POW (Z x Z))| f (|functions.total Z POW (Z x Z)| e1 e2))
         (and (|set.in POW (Z x POW (Z x Z))| f (|functions.partial Z POW (Z x Z)| e1 e2))
              (|set.in POW (Z x POW (Z x Z))| f (|relations.total Z POW (Z x Z)| e1 e2))))))
  :named |ax:def.tfun (Z x POW (Z x Z))|))
(declare-const s786 |POW (Z x Z)|)
(assert (!
  (|set.in Z| s403 NAT)
  :named |Define:ctx:3|))
(assert (!
  (|set.subseteq Z| s405 INT)
  :named |Define:ctx:4|))
(assert (!
  (= s405 (|interval| 0 s403))
  :named |Define:ctx:5|))
(assert (!
  (|set.subseteq Z| s586 s129)
  :named |Define:ctx:6|))
(assert (!
  (|set.subseteq Z| s626 NAT)
  :named |Define:ctx:7|))
(assert (!
  (|set.in POW (Z x Z)| s786 (|functions.total Z Z| s586 s169))
  :named |Local_Hyp:0|))
(assert (!
  (|set.in POW (Z x POW (Z x Z))| s787 (|functions.total Z POW (Z x Z)| s586 (|seq Z| s626)))
  :named |Local_Hyp:1|))
(assert (!
  (|set.in Z| s788 s586)
  :named |Local_Hyp:2|))
(assert (!
  (not
    (|set.in Z| s788 (|rel.domain Z Z| s786)))
  :named |Goal|))
(check-sat)
(exit)
